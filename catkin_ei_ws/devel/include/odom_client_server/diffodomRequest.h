// Generated by gencpp from file odom_client_server/diffodomRequest.msg
// DO NOT EDIT!


#ifndef ODOM_CLIENT_SERVER_MESSAGE_DIFFODOMREQUEST_H
#define ODOM_CLIENT_SERVER_MESSAGE_DIFFODOMREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace odom_client_server
{
template <class ContainerAllocator>
struct diffodomRequest_
{
  typedef diffodomRequest_<ContainerAllocator> Type;

  diffodomRequest_()
    : r(0.0)
    , phi1(0.0)
    , phi2(0.0)
    , l(0.0)  {
    }
  diffodomRequest_(const ContainerAllocator& _alloc)
    : r(0.0)
    , phi1(0.0)
    , phi2(0.0)
    , l(0.0)  {
  (void)_alloc;
    }



   typedef double _r_type;
  _r_type r;

   typedef double _phi1_type;
  _phi1_type phi1;

   typedef double _phi2_type;
  _phi2_type phi2;

   typedef double _l_type;
  _l_type l;





  typedef boost::shared_ptr< ::odom_client_server::diffodomRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::odom_client_server::diffodomRequest_<ContainerAllocator> const> ConstPtr;

}; // struct diffodomRequest_

typedef ::odom_client_server::diffodomRequest_<std::allocator<void> > diffodomRequest;

typedef boost::shared_ptr< ::odom_client_server::diffodomRequest > diffodomRequestPtr;
typedef boost::shared_ptr< ::odom_client_server::diffodomRequest const> diffodomRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::odom_client_server::diffodomRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::odom_client_server::diffodomRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::odom_client_server::diffodomRequest_<ContainerAllocator1> & lhs, const ::odom_client_server::diffodomRequest_<ContainerAllocator2> & rhs)
{
  return lhs.r == rhs.r &&
    lhs.phi1 == rhs.phi1 &&
    lhs.phi2 == rhs.phi2 &&
    lhs.l == rhs.l;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::odom_client_server::diffodomRequest_<ContainerAllocator1> & lhs, const ::odom_client_server::diffodomRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace odom_client_server

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::odom_client_server::diffodomRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::odom_client_server::diffodomRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::odom_client_server::diffodomRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::odom_client_server::diffodomRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::odom_client_server::diffodomRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::odom_client_server::diffodomRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::odom_client_server::diffodomRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "00289cfff876a99e75fdd52bd84f5aec";
  }

  static const char* value(const ::odom_client_server::diffodomRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x00289cfff876a99eULL;
  static const uint64_t static_value2 = 0x75fdd52bd84f5aecULL;
};

template<class ContainerAllocator>
struct DataType< ::odom_client_server::diffodomRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "odom_client_server/diffodomRequest";
  }

  static const char* value(const ::odom_client_server::diffodomRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::odom_client_server::diffodomRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 r\n"
"float64 phi1\n"
"float64 phi2\n"
"float64 l\n"
;
  }

  static const char* value(const ::odom_client_server::diffodomRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::odom_client_server::diffodomRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.r);
      stream.next(m.phi1);
      stream.next(m.phi2);
      stream.next(m.l);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct diffodomRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::odom_client_server::diffodomRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::odom_client_server::diffodomRequest_<ContainerAllocator>& v)
  {
    s << indent << "r: ";
    Printer<double>::stream(s, indent + "  ", v.r);
    s << indent << "phi1: ";
    Printer<double>::stream(s, indent + "  ", v.phi1);
    s << indent << "phi2: ";
    Printer<double>::stream(s, indent + "  ", v.phi2);
    s << indent << "l: ";
    Printer<double>::stream(s, indent + "  ", v.l);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ODOM_CLIENT_SERVER_MESSAGE_DIFFODOMREQUEST_H
