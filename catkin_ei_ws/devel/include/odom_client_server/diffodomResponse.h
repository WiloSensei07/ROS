// Generated by gencpp from file odom_client_server/diffodomResponse.msg
// DO NOT EDIT!


#ifndef ODOM_CLIENT_SERVER_MESSAGE_DIFFODOMRESPONSE_H
#define ODOM_CLIENT_SERVER_MESSAGE_DIFFODOMRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace odom_client_server
{
template <class ContainerAllocator>
struct diffodomResponse_
{
  typedef diffodomResponse_<ContainerAllocator> Type;

  diffodomResponse_()
    : Vx(0.0)
    , theta(0.0)  {
    }
  diffodomResponse_(const ContainerAllocator& _alloc)
    : Vx(0.0)
    , theta(0.0)  {
  (void)_alloc;
    }



   typedef double _Vx_type;
  _Vx_type Vx;

   typedef double _theta_type;
  _theta_type theta;





  typedef boost::shared_ptr< ::odom_client_server::diffodomResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::odom_client_server::diffodomResponse_<ContainerAllocator> const> ConstPtr;

}; // struct diffodomResponse_

typedef ::odom_client_server::diffodomResponse_<std::allocator<void> > diffodomResponse;

typedef boost::shared_ptr< ::odom_client_server::diffodomResponse > diffodomResponsePtr;
typedef boost::shared_ptr< ::odom_client_server::diffodomResponse const> diffodomResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::odom_client_server::diffodomResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::odom_client_server::diffodomResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::odom_client_server::diffodomResponse_<ContainerAllocator1> & lhs, const ::odom_client_server::diffodomResponse_<ContainerAllocator2> & rhs)
{
  return lhs.Vx == rhs.Vx &&
    lhs.theta == rhs.theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::odom_client_server::diffodomResponse_<ContainerAllocator1> & lhs, const ::odom_client_server::diffodomResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace odom_client_server

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::odom_client_server::diffodomResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::odom_client_server::diffodomResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::odom_client_server::diffodomResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::odom_client_server::diffodomResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::odom_client_server::diffodomResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::odom_client_server::diffodomResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::odom_client_server::diffodomResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2e06e770bac41553999830258ee3c4cd";
  }

  static const char* value(const ::odom_client_server::diffodomResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2e06e770bac41553ULL;
  static const uint64_t static_value2 = 0x999830258ee3c4cdULL;
};

template<class ContainerAllocator>
struct DataType< ::odom_client_server::diffodomResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "odom_client_server/diffodomResponse";
  }

  static const char* value(const ::odom_client_server::diffodomResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::odom_client_server::diffodomResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 Vx\n"
"float64 theta\n"
"\n"
;
  }

  static const char* value(const ::odom_client_server::diffodomResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::odom_client_server::diffodomResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Vx);
      stream.next(m.theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct diffodomResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::odom_client_server::diffodomResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::odom_client_server::diffodomResponse_<ContainerAllocator>& v)
  {
    s << indent << "Vx: ";
    Printer<double>::stream(s, indent + "  ", v.Vx);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ODOM_CLIENT_SERVER_MESSAGE_DIFFODOMRESPONSE_H
